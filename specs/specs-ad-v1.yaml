openapi: 3.0.4
info:
  title: Marketplace
  description: This is a place where sellers and buyers meat each other
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost/v1
tags:
  - name: comment
    description: Комментарии и рейтинг сущности

paths:

  /comment/create:
    post:
      tags:
        - comment
      summary: Создать комментарий для сущности
      operationId: commentCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreateResponse'

  /comment/update:
    post:
      tags:
        - comment
      summary: Создать комментарий для сущности
      operationId: commentUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreateResponse'

  /comment/all:
    post:
      tags:
        - comment
      summary: Получить все комментарии по типу
      operationId: getAllComments
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentGetAllRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentGetAllResponse'

  /comment/delete:
    post:
      tags:
        - comment
      summary: Получить все комментарии по типу
      operationId: commentDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentId'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreateResponse'


components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/CommentCreateRequest'
          read: '#/components/schemas/CommentCreateRequest'
          update: '#/components/schemas/CommentCreateRequest'
          delete: '#/components/schemas/CommentCreateRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/CommentCreateResponse'
          read: '#/components/schemas/CommentCreateResponse'
          update: '#/components/schemas/CommentCreateResponse'
          delete: '#/components/schemas/CommentCreateResponse'

    EntityId:
      type: string
      description: Идентификатор любой комментируемой сущности
      default: selected_ad_id
    CommentId:
      type: string
      description: Идентификатор элемента рейтинга
      default: comment_id
    AdLock:
      type: string
      description: Версия оптимистичной блокировки

    BaseComment:
      type: object
      description: Общий тип для комментария и рейтинга
      properties:
        id:
          $ref: '#/components/schemas/CommentId'
        entityId:
          $ref: '#/components/schemas/EntityId'
        entityType:
          $ref: '#/components/schemas/EntityType'
        comment:
          type: string
          description: Текст комментария
        rating:
          type: integer
          description: Рейтинг (0-10)

    EntityType:
      type: string
      description: Тип сущности
      enum:
        - ad
        - user
    #        ...

    CommentCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/CommentRequestDebug'
        - type: object
          properties:
            comment:
              $ref: '#/components/schemas/BaseComment'

    CommentGetAllRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/CommentRequestDebug'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/EntityType'

    CommentCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/CommentResponseSingle'

    CommentGetAllResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/CommentResponseMulti'

    CommentResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseComment'

    CommentResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом объявления
          properties:
            comment:
              $ref: '#/components/schemas/BaseComment'

    CommentResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            ads:
              type: array
              items:
                $ref: '#/components/schemas/BaseComment'

    # STUBS ======================
    CommentRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    CommentRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/CommentDebug'

    CommentDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/CommentRequestDebugMode'
        stub:
          $ref: '#/components/schemas/CommentRequestDebugStubs'

    CommentRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badRating # 0-10
        - cannotDelete
